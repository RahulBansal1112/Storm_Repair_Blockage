import os
import numpy as np
from graph import Graph, graph_dict
from osgeo import gdal 
import osmnx as ox
import pandas as pd
import networkx as nx
import rasterio as ras

#have to fix and get running

MAP_LOCATION = "Talbot Laboratory, South Wright Street, Campustown, Champaign, Champaign County, Illinois, 61820, United States"

# dist is in meters, network_type = drive/bike/walk
G = ox.graph_from_address(address=MAP_LOCATION, dist=500, dist_type="bbox", network_type="drive")

# project graph to CRS of EPSG:32616
G = ox.project_graph(G, to_crs='EPSG:32616')

# add elevation data from local raster file
raster_path = os.getcwd() + "\opentopo_raster\output_tin.tif"
G = ox.add_node_elevations_raster(G, raster_path, cpus=1)

fig, ax = ox.plot_graph(G)

graph_known_dict: graph_dict = {
   "num_nodes": 0,
   "edges": [],
   "node_weight": []
}
graph_known = Graph.from_dict(graph_known_dict)

for node in G.nodes():
    graph_known.add_node(node)
for edge in G.edges(): 
    graph_known.add_edge(edge[0], edge[1], 0)
"""

map_graph_known_dict: graph_dict = {
   "num_nodes": 46,
   "edges": [(37972349, 5727977710, 14.1), (5727977710, 37972349, 14.1), 
             (5727977710, 37975504, 21.9), (5727977710, 1512372840, 12.6), 
             (37974742, 37974745, 9.5), (37974742, 2366289498, 11.3), 
             (37974742, 38058901, 12.7), (37974745, 37974747, 9.4), 
             (37974745, 2366289499), (37974745, 38078585), 
             (2366289498, 2366289499, 7.9), (2366289498, 37974742, 11.3), 
             (38058901, 38078585, 9.5), (38058901, 37974742, 12.7), 
             (38058901, 38058900, 10.9), (37974747, 37974750, 7.7), 
             (37974747, 37985163, 11.5), (37974747, 38078589), 
             (2366289499, 37974745), (2366289499, 2366289498, 7.9), 
             (2366289499, 37985163, 7.8), (38078585, 37974745, 12.6), 
             (38078585, 38127679, 10.9), (38078585, 38078589, 9.4), 
             (38078585, 38058901, 9.5), (37974750, 37974751, 7.5), 
             (37974750, 37985166, 9.6), (37974750, 38078594), 
             (37985163, 37974747), (37985163, 2366289499, 10.3), 
             (37985163, 37985166, 6.4), (38078589, 37974747, 12.5), 
             (38078589, 38107786, 11.0), (38078589, 38078594, 7.8), 
             (38078589, 38078585, 9.4), (37974751, 37974753, 4.6), 
             (37974751, 38054121, 12.4), (37985166, 37974750, 9.6), 
             (37985166, 38077757, 25.0), (37985166, 37985163, 6.4), 
             (37985166, 37985171, 11.0), (38078594, 37974750, 10.3), 
             (38078594, 38140494, 9.7), (38078594, 38054121, 7.5), 
             (38078594, 38078589, 7.8), (37974753, 37974758, 12.1), 
             (37974753, 38078599, 12.4), (38054121, 37974751, 12.4), 
             (38054121, 38078599, 4.5), (38054121, 38078594, 7.5), 
             (37974758, 1518918162, 11.5), (37974758, 38054106, 12.4), 
             (37974758, 8479724206, 12.3), (38078599, 38098327, 11.6), 
             (38078599, 38054106, 12.0), (38078599, 38054121, 4.5), 
             (1518918162, 1508108536, 11.1), (1518918162, 37985171, 11.4), 
             (1518918162, 38065246, 4.8), (1518918162, 37974758, 11.5), 
             (38054106, 37985589, 12.0), (38054106, 38078599), 
             (38054106, 37974758), (38054106, 38054103), 
             (8479724206, 37974769), (37974769, 38003214), 
             (37974769, 1514714265), (38003214, 37974769), 
             (38003214, 38003213), (38003214, 37985589), 
             (1514714265, 1508108536), (37975504, 37975505), 
             (37975504, 5727977710), (37975504, 38077757), 
             (37975505, 1913353498), (37975505, 37975504), 
             (38077757, 1905962827), (38077757, 37985166), 
             (38077757, 37975504), (1913353498, 37975514), 
             (1913353498, 37975505), (37975514, 1913353498), 
             (37985171, 37974753), (37985171, 37985166), 
             (37985171, 1518918162), (37985588, 38003213), 
             (37985588, 38054103), (37985588, 37985589), 
             (38003213, 37985588), (38003213, 38003214), 
             (38054103, 38098327), (38054103, 37985588), 
             (38054103, 38054106), (37985589, 8479724206),
             (37985589, 38003214), (37985589, 38054106), 
             (38098327, 38054103), (38098327, 38140494), 
             (38058900, 38127679), (38058900, 38058901), 
             (38127679, 38107786), (38127679, 38058900), 
             (38127679, 38078585), (38065246, 5902412844), 
             (38065246, 1518918162), (5902412844, 38065246), 
             (5902412844, 1512372840), (1905962827, 37975505), 
             (1905962827, 1913353501), (38107786, 38078589),
             (38107786, 38140494), (38107786, 38127679), 
             (38140494, 38107786), (38140494, 38078594), 
             (38140494, 38098327), (1508108536, 8479724206), 
             (1508108536, 1514714265), (1512372840, 38077757), 
             (1512372840, 5902412844), (1512372840, 5727977710)],
   "node_weight": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
}
map_graph_known = Graph.from_dict(map_graph_known_dict)
two_long_path_visibility = [[(0,1),(1,0),(0,6),(6,0), (0,10),(10,0)],
               [(1,0),(0,1),(1,2),(2,1)],
               [(2,1),(1,2),(2,3),(3,2)],
               [(3,2),(2,3),(3,4),(4,3)],
               [(3,4),(4,3),(4,5),(5,4)],
               [(4,5),(5,4),(5,9),(9,5)],
               [(0,6),(6,0),(7,6),(6,7)],
               [(6,7),(7,6),(7,8),(8,7)],
               [(8,7),(7,8),(9,8),(8,9)],
               [(8,9),(9,8),(9,5),(5,9)],
               [(0,10),(10,0)]]
               """